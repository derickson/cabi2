input { stdin { } }

filter {


	## ----- CSV PROCESSING --------
	csv {
		columns => ["rawDuration","startDate","rawStartStation","endDate","rawEndStation","bikeNum","memberType"]
	}
	mutate {
		remove_field => "message"
		add_field => { 
			"city" => "Washington, DC"
		}
	}
	mutate {
		convert => {
			"rawDuration" => "integer"
		}
	}
	
	
	## ----- CLEAN STATION NAMES --------
	# remove optinonal station number from end of the station name
	grok {
		match => [ "rawStartStation", "^%{DATA:startStation}(\ \(%{INT}\))?$"]
		remove_field => "rawStartStation"
	}
	# remove optinonal station number from end of the station name
	grok{
		match => [ "rawEndStation", "^%{DATA:endStation}(\ \(%{INT}\))?$"]
		remove_field => "rawEndStation"
	}
	
	
	## ----- INTERRPET DURATION ------
	ruby {
    code => " event['duration_min'] = event['rawDuration'] / 60000.0 "
		remove_field => ["rawDuration"]
	}

	
	## ----- INTERPRET DATES --------
	# event date is the start Date
	date {
		#2014-10-01 00:01
		match => ["startDate", 'M/d/YYYY H:mm']
		timezone => "America/New_York"
		locale => en
	}
	# adjust date to ISO 8601
	date {
		match => ["startDate", 'M/d/YYYY H:mm']
		timezone => "America/New_York"
		locale => en
		target => "startDate"
	}
	# adjust date to ISO 8601
	date {
		match => ["endDate", 'M/d/YYYY H:mm']
		timezone => "America/New_York"
		locale => en
		target => "endDate"
	}

	## ----- Process Geospatial --------
  geoEnrich {
	database => "/Users/dave/dev/github/cabi2/lookups/compiledFullDCStations.csv"
	source => "startStation"
	target => "startLocation"
  }
  geoEnrich {
	database => "/Users/dave/dev/github/cabi2/lookups/compiledFullDCStations.csv"
	source => "endStation"
	target => "endLocation"
  }
	
	## ------ Behavior ------
	ruby {
		code => " event['behavior'] =  (event['startStation'] == event['endStation']) ? 'Round Trip' : 'Point to Point'"
	}
	#make all data sources conform to 'Subscriber' and 'Casual' for memberType
	ruby {
		code => " if (event['memberType'] == 'Registered' || event['memberType'] == 'Member') then event['memberType'] = 'Subscriber' end "
	}
	
  mutate {
    add_field => { 
      "route" => "%{startStation} -> %{endStation}"
      "stations_all" => [ "%{startStation}", "%{endStation}"]
    }
    remove_field => ['@timestamp', 'host']
  }

}

output { 
  
  stdout { codec => dots }
  # stdout { codec => rubydebug }
  # stdout { codec => json }
    
  elasticsearch {
    index => "bike-dc"
    hosts => ["localhost:9201"]

    manage_template => true
    template => "./bike_template.json"
    template_name => "bike_template"
    template_overwrite => true

    ## If your instance is secured with shield
    # ssl => true
    # ssl_certificate_verification => false
    # user => "username"
    # password => "password"
  }
  
}

